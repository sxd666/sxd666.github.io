<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>平衡的奶牛品种Balanced Cow Breeds</title>
      <link href="/2019/04/22/%E5%B9%B3%E8%A1%A1%E7%9A%84%E5%A5%B6%E7%89%9B%E5%93%81%E7%A7%8DBalanced%20Cow%20Breeds/"/>
      <url>/2019/04/22/%E5%B9%B3%E8%A1%A1%E7%9A%84%E5%A5%B6%E7%89%9B%E5%93%81%E7%A7%8DBalanced%20Cow%20Breeds/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 22 2019 21:05:24 GMT+0800 (GMT+08:00) --><a id="more"></a><p>所以，我用了dp转移，开两个状态：</p><pre><code>前一维代表 H 还没匹配的前括号数；后一维代表 G 还没匹配的前括号数；</code></pre><p>再把空间滚一滚，讨论一下是 ‘（’ 还是 ‘)’ ,放 H 还是 G ，大力转移；</p><p>具体见代码（蒟蒻第一篇题解，希望能过qwq）；（有点丑不要介意）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">2012</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> n,f[<span class="number">1005</span>][<span class="number">1005</span>],g[<span class="number">1005</span>][<span class="number">1005</span>];<span class="comment">//f是之前的状态，g是当前的状态。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> oo=<span class="number">0</span>;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//开始自然一个都没有。。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'('</span>)</span><br><span class="line">&#123;</span><br><span class="line">oo++;<span class="comment">//oo维护还没匹配的左括号总数。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=oo;++j)</span><br><span class="line">&#123;<span class="comment">//j枚举的是 H 的左括号还没匹配的数量。</span></span><br><span class="line"><span class="keyword">if</span>(j) g[j][oo-j]=(g[j][oo-j]+f[j<span class="number">-1</span>][oo-j])%mod;<span class="comment">//左括号变成 H</span></span><br><span class="line"><span class="keyword">if</span>(oo-j) g[j][oo-j]=(g[j][oo-j]+f[j][oo-j<span class="number">-1</span>])%mod;<span class="comment">//左括号变成 G</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)</span><br><span class="line">&#123;</span><br><span class="line">oo--;<span class="comment">//同上</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=oo;++j)</span><br><span class="line">&#123;<span class="comment">//同上</span></span><br><span class="line">g[j][oo-j]=(g[j][oo-j]+f[j+<span class="number">1</span>][oo-j])%mod;<span class="comment">//一个 H 被匹配掉了</span></span><br><span class="line">g[j][oo-j]=(g[j][oo-j]+f[j][oo-j+<span class="number">1</span>])%mod;<span class="comment">//一个 G 被匹配掉了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=oo;++j) f[j][oo-j]=g[j][oo-j],g[j][oo-j]=<span class="number">0</span>;<span class="comment">//滚存一下</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,f[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//最后肯定没有不匹配的，所以直接输出f[0][0]。</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搬迁Relocation</title>
      <link href="/2019/04/22/%E6%90%AC%E8%BF%81Relocation/"/>
      <url>/2019/04/22/%E6%90%AC%E8%BF%81Relocation/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 22 2019 21:05:24 GMT+0800 (GMT+08:00) --><a id="more"></a><h2 id="最短路-状压dp"><a href="#最短路-状压dp" class="headerlink" title="最短路+状压dp"></a>最短路+状压dp</h2><p>由于我们看到他的k很小（1&lt;=k&lt;=5）就想到了<del>爆搜</del>状压</p><p>我们肯定要知道k个城镇与每个点之间的距离，最短路就跑k遍；</p><p>枚举选的农场，开始状压；</p><p>至于状压：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f [当前状态为i (二进制中，1表示走过)]  [当前所在的城镇为j]</span><br><span class="line">= f[i^(1&lt;&lt;(j-1))][p] + dis[p][j] (p为之前所在的城镇)</span><br><span class="line"></span><br><span class="line">初始时：f[1&lt;&lt;(k-1)][k] = dis[k][s](s为选的农场，k为第一个经过的城镇)</span><br><span class="line"></span><br><span class="line">最后枚举最后所在的城镇，加上他到选的农场的距离，取最小值；</span><br></pre></td></tr></table></figure><p></p><p>具体见代码，大佬勿喷qwq。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,k,wz[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tot,head[<span class="number">10005</span>],nx[<span class="number">100005</span>],to[<span class="number">100005</span>],w[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis[<span class="number">6</span>][<span class="number">10005</span>],vis[<span class="number">10005</span>],f[<span class="number">2005</span>][<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jia</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> aa,<span class="keyword">long</span> <span class="keyword">long</span> bb,<span class="keyword">long</span> <span class="keyword">long</span> cc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot++;</span><br><span class="line">nx[tot]=head[aa];</span><br><span class="line">to[tot]=bb;</span><br><span class="line">w[tot]=cc;</span><br><span class="line">head[aa]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> id,val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(node aa,node bb)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> aa.val&gt;bb.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">bh</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> aa,<span class="keyword">long</span> <span class="keyword">long</span> bb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node tt;</span><br><span class="line">tt.id=aa;</span><br><span class="line">tt.val=bb;</span><br><span class="line"><span class="keyword">return</span> tt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> rt)</span><span class="comment">//其实是dijkstra。。。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;node&gt;q;</span><br><span class="line">q.push(bh(wz[rt],<span class="number">0</span>));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">dis[rt][wz[rt]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node kk=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[kk.id]) <span class="keyword">continue</span>;</span><br><span class="line">vis[kk.id]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=head[kk.id];i;i=nx[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> yy=to[i];</span><br><span class="line"><span class="keyword">if</span>(dis[rt][yy]&gt;dis[rt][kk.id]+w[i])</span><br><span class="line">&#123;</span><br><span class="line">dis[rt][yy]=dis[rt][kk.id]+w[i];</span><br><span class="line">q.push(bh(yy,dis[rt][yy]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f3f3f3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=k;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;wz[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x,y,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">jia(x,y,z);</span><br><span class="line">jia(y,x,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=k;++i)</span><br><span class="line">&#123;</span><br><span class="line">spfa(i);<span class="comment">//预处理k个城镇到各点的距离</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="comment">//枚举选的农场</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=<span class="number">1</span>;j&lt;=k;++j) <span class="keyword">if</span>(i==wz[j]) &#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">continue</span>;<span class="comment">//城镇不能选，不是吗？</span></span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x3f3f3f</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=<span class="number">1</span>;j&lt;=k;++j)</span><br><span class="line">&#123;</span><br><span class="line">f[<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)][j]=dis[j][i];<span class="comment">//见上初始时</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=<span class="number">1</span>;j&lt;(<span class="number">1</span>&lt;&lt;k);++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> pp=<span class="number">1</span>;pp&lt;=k;++pp)<span class="comment">//枚举当前所在的城镇</span></span><br><span class="line"><span class="keyword">if</span>(j&amp;(<span class="number">1</span>&lt;&lt;(pp<span class="number">-1</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> qq=<span class="number">1</span>;qq&lt;=k;++qq)<span class="comment">//枚举之前所在的城镇</span></span><br><span class="line"><span class="keyword">if</span>(pp!=qq&amp;&amp;(j&amp;(<span class="number">1</span>&lt;&lt;(qq<span class="number">-1</span>))))</span><br><span class="line">&#123;</span><br><span class="line">f[j][pp]=min(f[j][pp],f[j^(<span class="number">1</span>&lt;&lt;(pp<span class="number">-1</span>))][qq]+dis[qq][wz[pp]]);<span class="comment">//转移</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> j=<span class="number">1</span>;j&lt;=k;++j)<span class="comment">//枚举最后所在的城镇</span></span><br><span class="line">&#123;</span><br><span class="line">ans=min(ans,f[(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>][j]+dis[j][i]);<span class="comment">//取最小值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完结撒花。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 状压 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上游戏</title>
      <link href="/2019/03/15/%E6%A0%91%E4%B8%8A%E6%B8%B8%E6%88%8F/"/>
      <url>/2019/03/15/%E6%A0%91%E4%B8%8A%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 22 2019 21:05:24 GMT+0800 (GMT+08:00) --><p>此题显然有<strong>O（n）做法</strong>，喵喵喵？</p><a id="more"></a><h2 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h2><p>让我们考虑一种颜色对答案的贡献</p><p>我们考虑把树中这种颜色的点都删掉，那么就会有很多的小树，这些小树中的点互相之间不会产生贡献，而不同树的两个点之间会产生贡献。</p><p>由此，我们可以得到每一种颜色，点的sum值就是 <strong>n - 所在小树的size</strong>。</p><p>由此，一个点的sum就是 n * 颜色数 - 每种颜色节点时所在小树的size。</p><p>我们考虑对于一棵小树的size，存在深度最小的节点上，那么后面就可以用<strong>树上差分</strong>实现覆盖。</p><p>求size，在回溯时遇到与当前颜色相同的点，就把整一颗子树的节点都删掉，那么一个点的答案就是，<strong> 子树的size - （当前删的个数 - 遍历时删的个数）</strong>。</p><p>因为每个节点只有一个颜色，所以一个节点会记录一次答案，<strong>特别的</strong>根节点的父亲设为所有颜色都有，全部统计一下。然后就树上差分传递下去，统计答案。</p><p>具体看代码吧。。。喵喵汪!!!(<del>奇丑无比</del>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();<span class="keyword">long</span> <span class="keyword">long</span> x=<span class="number">0</span>,ff=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) ff=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line"><span class="keyword">return</span> x*ff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> aa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(aa&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),aa=-aa;</span><br><span class="line"><span class="keyword">if</span>(aa&gt;<span class="number">9</span>) write(aa/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'0'</span>+aa%<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,sum,qwq;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> vis[<span class="number">100005</span>],ans[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tot,head[<span class="number">100005</span>],nx[<span class="number">200005</span>],to[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> col[<span class="number">100005</span>],sz[<span class="number">100005</span>],jian[<span class="number">100005</span>]；</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> lz[<span class="number">100005</span>],bj[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jia</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> aa,<span class="keyword">long</span> <span class="keyword">long</span> bb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot++;</span><br><span class="line">nx[tot]=head[aa];</span><br><span class="line">to[tot]=bb;</span><br><span class="line">head[aa]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> rt,<span class="keyword">long</span> <span class="keyword">long</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sz[rt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp=jian[col[fa]];<span class="comment">//遍历时删的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=head[rt];i;i=nx[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> yy=to[i];</span><br><span class="line"><span class="keyword">if</span>(yy==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(yy,rt);</span><br><span class="line">sz[rt]+=sz[yy];</span><br><span class="line">&#125;</span><br><span class="line">jian[col[rt]]++;<span class="comment">//删点</span></span><br><span class="line"><span class="keyword">if</span>(fa)</span><br><span class="line">&#123;</span><br><span class="line">lz[rt]=sz[rt]-jian[col[fa]]+tmp;<span class="comment">//子树的size - （当前删的个数 - 遍历时删的个数）</span></span><br><span class="line">jian[col[fa]]+=lz[rt];<span class="comment">//删点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> rt,<span class="keyword">long</span> <span class="keyword">long</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> yuanbj=bj[col[fa]];</span><br><span class="line">qwq+=lz[rt]-bj[col[fa]];<span class="comment">//差分啦</span></span><br><span class="line">bj[col[fa]]=lz[rt];</span><br><span class="line">ans[rt]=n*sum-qwq+bj[col[rt]];<span class="comment">//自己颜色的显然是不能删掉的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=head[rt];i;i=nx[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> yy=to[i];</span><br><span class="line"><span class="keyword">if</span>(yy==fa) <span class="keyword">continue</span>;</span><br><span class="line">getans(yy,rt);</span><br><span class="line">&#125;</span><br><span class="line">bj[col[fa]]=yuanbj;</span><br><span class="line">qwq-=lz[rt]-bj[col[fa]];<span class="comment">//还原啦</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=n;++i) </span><br><span class="line">&#123;</span><br><span class="line">col[i]=read();<span class="comment">//col[i]&lt;=100000,可能大于n。。。。</span></span><br><span class="line"><span class="keyword">if</span>(!vis[col[i]]) vis[col[i]]=<span class="number">1</span>,sum++;<span class="comment">//sum颜色种类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;n;++i) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x=read(),y=read();</span><br><span class="line">jia(x,y);jia(y,x);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;++i) <span class="keyword">if</span>(vis[i]) qwq+=n-jian[i],bj[i]=n-jian[i];<span class="comment">//特别处理根节点</span></span><br><span class="line">getans(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>;i&lt;=n;++i) write(ans[i]),<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家见谅，讲得自己都qwq了。。。</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/15/hello-world/"/>
      <url>/2019/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 22 2019 21:05:24 GMT+0800 (GMT+08:00) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
